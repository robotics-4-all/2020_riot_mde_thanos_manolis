#include "../inc/mqtt_funcs.h"

/* Peripheral includes */
#include "fmt.h"
#include "{{perihperal_name}}.h"
#include "{{perihperal_name}}_params.h"
#include "xtimer.h"

/*
 * Function that triggers and returns a sensor measurement
 */
static int gen_sensor_values(void)
{
    /* Fix port parameter for digital sensor */
    srf04_params_t my_params;

    /* ESP32 PINS */
    // my_params.trigger = GPIO_PIN(1,4);
    // my_params.echo = GPIO_PIN(1,0);

    /* ESP8266 PINS */
    // my_params.trigger = GPIO_PIN(0,16);
    // my_params.echo = GPIO_PIN(0,5);

    /* PINS */
    my_params.trigger = GPIO_PIN( {{ trigger_port }} , {{ trigger_pin }} );
    my_params.echo = GPIO_PIN( {{ echo_port }} , {{ echo_pin }} );

    /* Initialize gpio and interrupt */
    srf04_t dev;
    if (srf04_init(&dev, &my_params) == SRF04_OK)
        printf("SRF04 sensor connected\n");
    else {
        printf("Failed to connect to SRF04 sensor\n");
        return 1;
    }

    int dist = srf04_get_distance(&dev);

    if (dist == SRF04_ERR_INVALID) {
        printf("Error: No valid measurement is available\n");
        return SRF04_ERR_INVALID;
    }else if (dist == SRF04_ERR_MEASURING) {
        printf("Error: measurement is in progress\n");
        return SRF04_ERR_MEASURING;
    }else {
        printf("SRF04 values - dist: %.1f cm\n", (float)dist/10);
        return dist;
    }
}

/*
 * Command to start the procedure. Every five seconds it      
 * gets a new sensor measurement and publishes it to topic    
 * 'sensor/{{peripheral_name}}_<id>'. The number of messages to be         
 * publshed is also specified.                   
 *                                               
 * - arg 1     MQTT-SN Gateway IP address
 * - arg 2     ID of node that publishes         
 * - arg 3     Number of messages to be published
 */

static int cmd_start(int argc, char **argv)
{
    if (argc < 3) {
        printf("usage: %s <address> <id> <num_of_msgs>\n", argv[0]);
        return 1;
    }
    
    /* Name of the topic */
    char topic[32];
    sprintf(topic,"sensor/{{peripheral_name}}_%d", atoi(argv[2]));

    /* Number of messages to be published */
    /* Default value: 10 */
    int num_of_msgs = 10;
    if (argc == 4)
        num_of_msgs = atoi(argv[3]);
    
    /* Message to be published */
    char msg[128];

    /* Try to connect to the gateway */
    while(con(argv[1], EMCUTE_PORT));

    /* Publish sensor output every 5 seconds */
    for (int i=0; i<num_of_msgs; i++) {
        /* Get a sensor measurement */
        int output = gen_sensor_values();

        /* Create a message to be published */
        sprintf(msg, "{id: %d, {{peripheral_name}} Output: %.1f}", atoi(argv[2]), (float)output/10);
        
        /* publish to the topic */
        pub(topic, msg, 0);

        /* it sleeps for five seconds */
        xtimer_sleep(5);
    }

    /* Disconnect from the gateway */
    discon();

    return 0;
}

static const shell_command_t shell_commands[] = {
    { "start", "Start publishing Sensor output", cmd_start },
    { "con", "connect to MQTT broker", cmd_con },
    { "discon", "disconnect from the current broker", cmd_discon },
    { "pub", "publish something", cmd_pub },
    { "sub", "subscribe topic", cmd_sub },
    { "unsub", "unsubscribe from topic", cmd_unsub },
    { "will", "register a last will", cmd_will },
    { NULL, NULL, NULL }
};

int main(void)
{
    puts("MQTT-SN application\n");
    puts("Type 'help' to get started. Have a look at the README.md for more "
         "information.");
    
    /* The main thread needs a msg queue to be able to run `ping6` */
    msg_init_queue(queue, ARRAY_SIZE(queue));

    /* Initialize our subscription buffers */
    memset(subscriptions, 0, (NUMOFSUBS * sizeof(emcute_sub_t)));

    /* Start the emcute thread */
    thread_create(stack, sizeof(stack), EMCUTE_PRIO, 0,
                  emcute_thread, NULL, "emcute");

    /* Start shell */
    char line_buf[SHELL_DEFAULT_BUFSIZE];
    shell_run(shell_commands, line_buf, SHELL_DEFAULT_BUFSIZE);

    return 0;
}