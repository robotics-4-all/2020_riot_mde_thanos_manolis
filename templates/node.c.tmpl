/*
 * Publisher node
 */

/* Peripheral includes */
#include "fmt.h"
#include "{{ peripheral_name }}.h"
#include "{{ peripheral_name }}_params.h"
#include "xtimer.h"

/* MQTT-S includes */
#include <time.h>
#include "shell.h"
#include "msg.h"
#include "net/emcute.h"
#include "net/ipv6/addr.h"

#ifndef EMCUTE_ID
#define EMCUTE_ID ("gertrud")
#endif
#define EMCUTE_PORT ({{port}})
#define EMCUTE_PRIO (THREAD_PRIORITY_MAIN - 1)

#define NUMOFSUBS (16U)
#define TOPIC_MAXLEN (64U)

static char stack[THREAD_STACKSIZE_DEFAULT];
static msg_t queue[8];

// static emcute_sub_t subscriptions[NUMOFSUBS];
// static char topics[NUMOFSUBS][TOPIC_MAXLEN];

static void *emcute_thread(void *arg)
{
    (void)arg;
    emcute_run(EMCUTE_PORT, EMCUTE_ID);
    return NULL; // should never be reached
}

/*
 * Function to get qos level
 */
static unsigned get_qos(int qos)
{
    switch (qos)
    {
    case 1:
        return EMCUTE_QOS_1;
    case 2:
        return EMCUTE_QOS_2;
    default:
        return EMCUTE_QOS_0;
    }
}

/*
 * Function that connects to the MQTT-SN gateway   
 *                                                 
 * - param addr    MQTT-SN Gateway IP address      
 * - param port    MQTT-SN Gateway Port            
 */
static int con(char* addr, int port)
{
    sock_udp_ep_t gw = { .family = AF_INET6, .port = EMCUTE_PORT };
    gw.port = port;

    /* parse address */
    if (ipv6_addr_from_str((ipv6_addr_t *)&gw.addr.ipv6, addr) == NULL) {
        printf("error parsing IPv6 address\n");
        return 1;
    }

    if (emcute_con(&gw, true, NULL, NULL, 0, 0) != EMCUTE_OK) {
        printf("error: unable to connect to [%s]:%i\n", addr, port);
        return 1;
    }
    
    printf("Successfully connected to gateway at [%s]:%i\n", addr, port);
    return 0;
}

/*
 * Function that disconnects from the MQTT-SN gateway
 */
static int discon(void)
{
    int res = emcute_discon();

    if (res == EMCUTE_NOGW) {
        puts("error: not connected to any broker");
        return 1;
    }
    else if (res != EMCUTE_OK) {
        puts("error: unable to disconnect");
        return 1;
    }

    puts("Disconnect successful");
    return 0;
}

/*
 * Function that publishes a message to a topic 
 *                                             
 * - param topic   Topic in which to publish    
 * - param data    Message to be published      
 * - param qos     Quality of service           
 */
static int pub(char* topic, char* data, int qos)
{
    emcute_topic_t t;
    unsigned flags = EMCUTE_QOS_0;

    /* parse QoS level */
    flags |= get_qos(qos);

    /* Get topic id */
    t.name = topic;
    if (emcute_reg(&t) != EMCUTE_OK) {
        puts("error: unable to obtain topic ID");
        return 1;
    }

    /* Publish data */
    if (emcute_pub(&t, data, strlen(data), flags) != EMCUTE_OK) {
        printf("error: unable to publish data to topic '%s [%i]'\n",
                t.name, (int)t.id);
        return 1;
    }

    printf("published %s on topic %s\n", data, topic);

    return 0;
}

/*
 * Function that triggers and returns a sensor measurement
 */
static int gen_sensor_values(void)
{
    /* Fix port parameter for digital sensor */
    srf04_params_t my_params;

    /* PINS */
    my_params.trigger = GPIO_PIN({{trigger_port}}, {{trigger_pin}});
    my_params.echo = GPIO_PIN({{echo_port}}, {{echo_pin}});

    /* Initialize gpio and interrupt */
    srf04_t dev;
    if (srf04_init(&dev, &my_params) == SRF04_OK)
        printf("SRF04 sensor connected\n");
    else
    {
        printf("Failed to connect to SRF04 sensor\n");
        return 1;
    }

    int dist = srf04_get_distance(&dev);

    if (dist == SRF04_ERR_INVALID)
    {
        printf("Error: No valid measurement is available\n");
        return SRF04_ERR_INVALID;
    }
    else if (dist == SRF04_ERR_MEASURING)
    {
        printf("Error: measurement is in progress\n");
        return SRF04_ERR_MEASURING;
    }
    else
    {
        printf("SRF04 values - dist: %.1f cm\n", (float)dist / 10);
        return dist;
    }
}

/*
 * Function that starts the procedure. Every five seconds it      
 * gets a new sensor measurement and publishes it to topic    
 * 'sensor/{{ peripheral_name }}_<id>'. The number of messages to be         
 * publshed is also specified.                   
 *                                               
 * - arg 1     MQTT-SN Gateway IP address
 * - arg 2     ID of node that publishes         
 * - arg 3     Number of messages to be published
 */

static int start(char *addr, int id, int num_of_msgs)
{
    /* Name of the topic */
    char topic[32];
    sprintf(topic, "sensor/{{ peripheral_name }}_%d", id);

    /* Message to be published */
    char msg[128];

    /* Try to connect to the gateway */
    while (con(addr, EMCUTE_PORT))
        ;

    /* Publish sensor output every 5 seconds */
    for (int i = 0; i < num_of_msgs; i++)
    {
        /* Get a sensor measurement */
        int output = gen_sensor_values();

        /* Create a message to be published */
        sprintf(msg, "{id: %d, {{ peripheral_name }} Output: %.1f}", id, (float)output / 10);

        /* publish to the topic */
        pub(topic, msg, 0);

        /* it sleeps for five seconds */
        xtimer_sleep(5);
    }

    /* Disconnect from the gateway */
    discon();

    return 0;
}

int main(void)
{
    puts("MQTT-SN application\n");
    printf("This application runs on %s\n", RIOT_BOARD);

    /* The main thread needs a msg queue to be able to run `ping6` */
    msg_init_queue(queue, ARRAY_SIZE(queue));

    // /* Initialize our subscription buffers */
    // memset(subscriptions, 0, (NUMOFSUBS * sizeof(emcute_sub_t)));

    /* Start the emcute thread */
    thread_create(stack, sizeof(stack), EMCUTE_PRIO, 0,
                  emcute_thread, NULL, "emcute");

    /* Start the procedure*/
    start( "{{address}}", {{id}}, {{num_of_msgs}} );

    return 0;
}