void *send_bme680(void *arg)
{
    (void) arg;

    /* Name of the topic */
    char topic[32];
    sprintf(topic, "sensor/bme680_{{ id[loop.index0] }}");

    /* Allocate memory for the message to be published */
    char *msg = malloc(128);
    
    bme680_t dev[BME680_NUMOF];
    bme680_params_t myparams[BME680_NUMOF];
    memcpy(&myparams, &bme680_params, sizeof(bme680_params_t));

    for (unsigned i = 0; i < BME680_NUMOF; i++) 
    {
        BME680_SENSOR(&dev[i]).amb_temp = 25;

        myparams[i].intf.i2c.addr = 0x{{ args[loop.index0]["slave_address"] }};

        printf("Initialize BME680 sensor %u ... ", i);
        if (bme680_init(&dev[i], &myparams[i]) != BME680_OK)
            puts("failed");
        else
            puts("OK");
    }

    /* Print sensor output with frequency {{ frequency[loop.index0] }} Hz */
    while (true)
    {
        struct bme680_field_data data;

        for (unsigned i = 0; i < BME680_NUMOF; i++) 
        {
            /* trigger one measuerment */
            bme680_force_measurement(&dev[i]);
            /* get the duration for the measurement */
            int duration = bme680_get_duration(&dev[i]);
            /* wait for the duration */
            xtimer_msleep(duration);
            /* read the data */
            int res = bme680_get_data(&dev[i], &data);

            if (res == 0 && dev[i].sensor.new_fields) 
            {
                /* Create a message to be published */
                sprintf(msg, "{id: {{ id[loop.index0] }}, BME680 Output: ");
#ifndef MODULE_BME680_FP
                sprintf(msg + strlen(msg), 
                        "[Temp] = %02d.%02d C, "
                        "[Pressure] = %" PRIu32 " Pa, "
                        "[Humidity] = %02" PRIu32 ".%03" PRIu32 " %%",
                        data.temperature / 100, data.temperature % 100,
                        data.pressure, data.humidity / 1000, data.humidity % 1000);
                
                /* Avoid using measurements from an unstable heating setup */
                if (data.status & BME680_GASM_VALID_MSK) 
                    sprintf(msg + strlen(msg),
                            ", [Gas] = %" PRIu32 " ohms", data.gas_resistance);
#else
                sprintf(msg + strlen(msg), 
                        "[Temp] = %.2f C, "
                        "[Pressure] = %.2f Pa, "
                        "[Humidity] %.3f %%",
                        data.temperature, data.pressure, data.humidity);

                /* Avoid using measurements from an unstable heating setup */
                if (data.status & BME680_GASM_VALID_MSK) 
                    sprintf(msg + strlen(msg),
                            ", [Gas] = %.0f ohms", data.gas_resistance);
#endif
                sprintf(msg + strlen(msg), "}\n");

                printf("%s", msg);                
                
                /* Publish to the topic */
                pub(topic, msg, 0);
            }
            else if (res == 0)
                printf("[bme680]: no new data\n");
            else 
                printf("[bme680]: read data failed with reason %d\n", res);
        }

        /* Sleep for {{ 1/frequency[loop.index0] }} seconds */
        xtimer_msleep( 1000 / {{ frequency[loop.index0] }} );
    }

    return NULL;
}