void *emcute_thread(void *arg)
{
    (void)arg;
    emcute_run(EMCUTE_PORT, EMCUTE_ID);
    return NULL; // should never be reached
}

/*
 * Function to get qos level
 */
unsigned get_qos(int qos)
{
    switch (qos)
    {
    case 1:
        return EMCUTE_QOS_1;
    case 2:
        return EMCUTE_QOS_2;
    default:
        return EMCUTE_QOS_0;
    }
}

/*
 * Function that connects to the MQTT-SN gateway   
 *                                                 
 * - param addr    MQTT-SN Gateway IP address      
 * - param port    MQTT-SN Gateway Port            
 */
int con(char *addr, int port)
{
    sock_udp_ep_t gw = {.family = AF_INET6, .port = EMCUTE_PORT};
    gw.port = port;

    /* parse address */
    if (ipv6_addr_from_str((ipv6_addr_t *)&gw.addr.ipv6, addr) == NULL)
    {
        printf("error parsing IPv6 address\n");
        return 1;
    }

    if (emcute_con(&gw, true, NULL, NULL, 0, 0) != EMCUTE_OK)
    {
        printf("error: unable to connect to [%s]:%i\n", addr, port);
        return 1;
    }

    printf("Successfully connected to gateway at [%s]:%i\n", addr, port);
    return 0;
}

/*
 * Function that disconnects from the MQTT-SN gateway
 */
int discon(void)
{
    int res = emcute_discon();

    if (res == EMCUTE_NOGW)
    {
        puts("error: not connected to any broker");
        return 1;
    }
    else if (res != EMCUTE_OK)
    {
        puts("error: unable to disconnect");
        return 1;
    }

    puts("Disconnect successful");
    return 0;
}

/*
 * Function that publishes a message to a topic 
 *                                             
 * - param topic   Topic in which to publish    
 * - param data    Message to be published      
 * - param qos     Quality of service           
 */
int pub(char *topic, char *data, int qos)
{
    emcute_topic_t t;
    unsigned flags = EMCUTE_QOS_0;

    /* parse QoS level */
    flags |= get_qos(qos);

    /* Get topic id */
    t.name = topic;
    if (emcute_reg(&t) != EMCUTE_OK)
    {
        puts("error: unable to obtain topic ID");
        return 1;
    }

    /* Publish data */
    if (emcute_pub(&t, data, strlen(data), flags) != EMCUTE_OK)
    {
        printf("error: unable to publish data to topic '%s [%i]'\n",
               t.name, (int)t.id);
        return 1;
    }

    printf("published %s on topic %s\n", data, topic);

    return 0;
}

int sub(char *topic, int qos, void *func)
{
    unsigned flags = EMCUTE_QOS_0;

    /* parse QoS level */
    flags |= get_qos(qos);

    /* find empty subscription slot */
    unsigned i = 0;
    for (; (i < NUMOFSUBS) && (subscriptions[i].topic.id != 0); i++) {}
    if (i == NUMOFSUBS) 
    {
        puts("error: no memory to store new subscriptions");
        return 1;
    }

    subscriptions[i].cb = func;
    strcpy(topics[i], topic);
    subscriptions[i].topic.name = topics[i];
    if (emcute_sub(&subscriptions[i], flags) != EMCUTE_OK) {
        printf("error: unable to subscribe to %s\n", topic);
        return 1;
    }

    printf("Now subscribed to %s\n", topic);
    return 0;
}