#include <time.h>
#include "shell.h"
#include "msg.h"
#include "fmt.h"
#include "xtimer.h"
#include "string.h"

/* Peripheral includes */
{%- for name in peripheral_name.values() %}
#include "{{ name }}.h"
#include "{{ name }}_params.h"
{%- endfor %}

/* MQTT-S includes */
#include "net/emcute.h"
#include "net/ipv6/addr.h"

#ifndef EMCUTE_ID
#define EMCUTE_ID ("gertrud")
#endif
#define EMCUTE_PORT ({{ port }})
#define EMCUTE_ADDRESS ("{{ address }}")

#define NUMOFSUBS (16U)
#define TOPIC_MAXLEN (64U)

msg_t queue[8];

static emcute_sub_t subscriptions[NUMOFSUBS];
static char topics[NUMOFSUBS][TOPIC_MAXLEN];

{% for i in range(num_of_peripherals) -%}
char stack{{ id[loop.index0] }}[THREAD_STACKSIZE_DEFAULT];
{% endfor -%}
char stack_mqtt[THREAD_STACKSIZE_DEFAULT];

{% include 'templates/mqtt_con.c.tmpl' %}

{% for name in peripheral_name.values() %}
{%- if name == "srf04" or name == "bme680" or name == "mpl3115a2" or name == "ws281x" %}
/*
 * [ {{name}} {{peripheral_type[name]}} ] 
 * This function gets a sensor measurement with frequency {{ frequency[loop.index0] }} Hz 
 * and publishes it to topic 'sensor/{{ name }}_{{ id[loop.index0] }}'.
 */
{% include "templates/" + name + ".c.tmpl" %}
{% else -%}
/*
 * This peripheral is not supported. Therefore, its configuration function
 * is yet to be implemented. This function should first initialize the 
 * sensor, get a measurement, and then publish it to the broker. 
 */
// int send_{{ name }}(void)
// {
//     ; // You need to fill this function
// }
{% endif -%}
{% endfor %}

int main(void)
{
    printf("This application runs on %s\n", RIOT_BOARD);

    /* Initialize our subscription buffers */
    memset(subscriptions, 0, (NUMOFSUBS * sizeof(emcute_sub_t)));

    /* Start the emcute thread */
    thread_create(stack_mqtt, sizeof(stack_mqtt), 
                  THREAD_PRIORITY_MAIN - 1, 
                  0,
                  emcute_thread, 
                  NULL, "emcute");

    /* Try to connect to the gateway */
    if (con(EMCUTE_ADDRESS, EMCUTE_PORT))
        printf("Couldn't connect to broker. The measurements will just be printed instead.\n");

    {% for name in peripheral_name.values() -%}
    /* Start the {{ name }} thread*/
    thread_create(stack{{ id[loop.index0] }}, sizeof(stack{{ id[loop.index0] }}),
                  THREAD_PRIORITY_MAIN - 1,
                  THREAD_CREATE_STACKTEST,
                  {% if peripheral_type[name] == "sensor" %}
                  send_{{ name }},
                  {% else %}
                  receive_{{ name }},
                  {% endif %}
                  NULL, "{{ name }}");
    {% endfor -%}

    return 0;
}