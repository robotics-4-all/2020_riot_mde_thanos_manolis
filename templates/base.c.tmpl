/*
 * Publisher node
 */

#include <time.h>
#include "shell.h"
#include "msg.h"
#include "fmt.h"
#include "xtimer.h"

/* Peripheral includes */
#include "{{ peripheral_name }}.h"
#include "{{ peripheral_name }}_params.h"

{% include 'templates/mqtt_con.c.tmpl' %}

{% if peripheral_name == "srf04" -%}
{% include 'templates/srf04.c.tmpl' -%}
{% elif peripheral_name == "bme680" -%}
{% include 'templates/bme680.c.tmpl' -%}
{% else -%}
/*
 * Function that initializes {{ peripheral_name }} sensor
 */
static {{ peripheral_name }}_t init_sensor(void)
{
    ; // You need to fill this function
}

/*
 * Function that triggers and returns sensor measurement
 */
static int gen_sensor_values(void)
{
    ; // You need to fill this function
}
{%- endif %}

/*
 * Function that starts the procedure. It gets a new sensor measurement 
 * with frequency {{ frequency }} Hz and publishes it to topic 'sensor/{{ peripheral_name }}_{{ id }}'.
 */
static int start(void)
{
    /* Name of the topic */
    char topic[32];
    sprintf(topic, "sensor/{{ peripheral_name }}_{{ id }}");
    
    /* Try to connect to the gateway */
    if (con(EMCUTE_ADDRESS, EMCUTE_PORT))
    {
        printf("Couldn't connect to broker. The measurements will just be printed instead.\n");

        /* Initialize sensor */
        {{ peripheral_name }}_t dev;
        if (init_sensor(&dev) == 0)
            printf("{{ peripheral_name }} sensor connected\n");
        else
        {
            printf("Failed to connect to {{ peripheral_name }} sensor\n");
            return 1;
        }

        /* Print sensor output with frequency {{ frequency }} Hz */
        while(true)
        {
            /* Get a sensor measurement */
            gen_sensor_values(dev);

            /* Sleep for five seconds */
            xtimer_sleep( 1 / {{ frequency }} );
        }
    }
    else
    {
        /* Initialize sensor */
        {{ peripheral_name }}_t dev;
        if (init_sensor(&dev) == 0)
            printf("{{ peripheral_name }} sensor connected\n");
        else
        {
            printf("Failed to connect to {{ peripheral_name }} sensor\n");
            return 1;
        }

        /* Print sensor output with frequency {{ frequency }} Hz */
        while(true)
        {
            /* Message to be published */
            char msg[128];

            /* Get a sensor measurement */
            int output = gen_sensor_values(dev);

            /* Create a message to be published */
            sprintf(msg, "{id: {{ id }}, {{ peripheral_name }} Output: %.1f}", (float)output / 10);

            /* Publish to the topic */
            pub(topic, msg, 0);

            /* Sleep for five seconds */
            xtimer_sleep( 1 / {{ frequency }} );
        }

        /* Disconnect from the gateway */
        discon();
    }

    return 0;
}

int main(void)
{
    puts("MQTT-SN application\n");
    printf("This application runs on %s\n", RIOT_BOARD);

    /* The main thread needs a msg queue to be able to run `ping6` */
    msg_init_queue(queue, ARRAY_SIZE(queue));

    // /* Initialize our subscription buffers */
    // memset(subscriptions, 0, (NUMOFSUBS * sizeof(emcute_sub_t)));

    /* Start the emcute thread */
    thread_create(stack, sizeof(stack), EMCUTE_PRIO, 0,
                  emcute_thread, NULL, "emcute");

    /* Start the procedure*/
    start();

    return 0;
}